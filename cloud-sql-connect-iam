#!/usr/bin/env bash
#
# `cloud-sql-connect-iam`: Connect to Google Cloud SQL securely with IAM auth.
#
# See `csql_ciam::_show_usage` for detailed usage explanation.
#
# Code style mostly follows [Google's Shell Style Guide]
# (https://google.github.io/styleguide/shellguide.html) with some minor
# differences:
#
# -   Strive to mimic idiomatic Python where possible.
# -   Avoid `exit` and prefer `return`, which behaves more like Python's `raise`
#     when used properly.
# -   Prefer functions to be single-output, mimicking Python single-return
#     convention, where stdout behaves somewhat like Python's `return`.
#     However, some bash functions are more like Python generators, in which
#     case stdout is more like `yield`.
# -   All-caps are typically global, aside from exporting environment variables
#     to child processes.
# -   Underscore-prefixed names indicate private - defined and used only
#     within this file.  Non-underscore-prefixed globals typically may be passed
#     in via environment.
# -   Prefer globals to be immutable, with an exception being arg parsing, which
#     may perform initial assignment and then being immutable.  (Unfortunately
#     it's impractical to return dict-like result from an arg parsing function;
#     see https://cjungmann.github.io/yaddemo/docs/bashreturnarray.html)
# -   Put docstrings *inside* functions - not outside, and avoid noisy banner-
#     style comments.
# -   Pretend docstrings/comments are Markdown; use [Google's style]
#     (https://github.com/google/styleguide/blob/gh-pages/docguide/style.md).
# -   Assign function input arguments to clearly named local variables at the
#     very beginning of the function (after the docstring, if there is one)
#     rather than using e.g. `"$1"` throughout the function.
# -   Use `|| return` everywhere in functions because [bash is terrible]
#     (https://stackoverflow.com/questions/4072984).
#
set -euo pipefail

# Input environment variables that can be used in place of command-line args:
# (Note: some - but not all - of these are also exported to the subcommand)
: ${CSQL_CIAM_CONNECTION_NAME:=}
: ${CSQL_CIAM_DEBUG:=}
: ${CSQL_CIAM_GCP_PROJECT:=}
: ${CSQL_CIAM_GCP_REGION:=}
: ${CSQL_CIAM_IAM_AUTH:=1}
: ${CSQL_CIAM_IMPERSONATE_SERVICE_ACCOUNT:=}
: ${CSQL_CIAM_INSTANCE_NAME:=}
: ${CSQL_CIAM_PROXY_COMMAND:=cloud-sql-proxy}
: ${CSQL_CIAM_PROXY_TIMEOUT:=3}
: ${CSQL_CIAM_PROXY_TMPDIR:=/tmp}

_CSQL_CIAM_PROXY_ARGS=()
_CSQL_CIAM_SUBCOMMAND_ARGS=()

csql_ciam::_show_usage() {
  local prog_name="$(basename "$0")"
  cat << EOF
${prog_name}: Connect to Google Cloud SQL securely with IAM auth.

Usage:
  ${prog_name} <instance_name|connection_name> [--] [subcmd...]

Description:
  Connects to a Cloud SQL database instance over cloud-sql-proxy using a unix
  domain socket and IAM-based authentication (optional), and then runs a command
  while the proxy continues in the background.

  This tool addresses some of the limitations of the official \`gcloud sql
  connect\`: IAM authentication, unix-domain sockets, and accepting additional
  sub-command arguments.  The primary focus is to simplify automation of
  Cloud SQL provisioning for deployment from GitHub Actions with Terraform and
  workload identity federation, but it can also be used from a system
  administration standpoint to quickly, conveniently, and securely connect to a
  Cloud SQL instance without requiring use of shared secrets (password), and
  instead leveraging Google Cloud's IAM.

  Conceptually, this tools effectively acts like a Python async context manager
  that runs cloud-sql-proxy over a unix-domain socket in the background, runs a
  subcommand with a predictable environment, and then shuts down the proxy:

    # Pseudo code:
    async with cloud_sql_connect_iam.Context(...) as env:
        assert 'CSQL_CIAM_CONNECTION_NAME' in env
        assert 'MYSQL_HOST' in env
        # etc.

  The subcommand runs with several environment variables exported:

  *   \`CSQL_CIAM_CONNECTION_NAME\`
  *   \`CSQL_CIAM_GCP_PROJECT\`
  *   \`CSQL_CIAM_GCP_REGION\`
  *   \`CSQL_CIAM_IAM_AUTH\`
  *   \`CSQL_CIAM_IMPERSONATE_SERVICE_ACCOUNT\`
  *   \`CSQL_CIAM_INSTANCE_NAME\`
  *   \`CSQL_CIAM_PROXY_SOCKET_FILE\`
  *   \`CSQL_CIAM_USER\`
  *   \`LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN\`
  *   \`MYSQL_UNIX_PORT\`

IAM authentication:
  Use of Cloud SQL IAM authentication requires care from a security standpoint
  because cloud-sql-proxy and gcloud-sql-connect use TCP sockets by default,
  which creates a local port that provides direct SQL access with only a
  username - i.e. unacceptable.  Instead, unix-domain sockets are far more
  secure because they can be locked down with 0700 file system permissions.
  Unfortunately, gcloud-sql-connect doesn't support unix-domain sockets
  (yet?), and cloud-sql-proxy requires painstaking management of temp
  directories to avoid collision with concurrently running proxies.  This tool
  eliminates the hassle by automatically running the proxy in the background
  with a unique tmpdir, and cleaning up upon exiting.

  IAM authentication is not strictly required; although it's ideal in many
  cases, there are certain cases where you can't avoid the need for password-
  based login.  In particular, creating the first IAM user for a Cloud SQL
  instance requires use of a built-in (password-based) user to bootstrap the
  IAM user's permissions.  By default, gcloud application-default credentials
  are used for IAM auth, but \`--password\` or \`--password=...\` can be
  passed to use password-based login instead.

Positional arguments:
  <instance_name|connection_name>
        The name of the Google Cloud SQL instance or full connection name.
  [--]
        If specified, pass all subsequent arguments directly to MySQL.
  [mysql_arguments...]
        Any additional arguments passed directly to the MySQL client.

Keyword arguments:
  --help
        Show help.
  --impersonate-service-account=...
        Comma separated list of service accounts to impersonate. Last value
        is the target account.
  --no-iam
        Use password-based login instead of IAM auth.
  --project=...
        Google Cloud project name; defaults to gcloud default project, and
        ignored if connection_name is used.
  --region=...
        Google Cloud region (e.g. \`us-central1\`); defaults to gcloud default
        region, and ignored if connection_name is used.
  --proxy-command=cloud-sql-proxy
        Path to the cloud-sql-proxy command.
  --proxy-tmpdir=/tmp
        Directory to store the proxy socket.
  --proxy-timeout=3
        Time in seconds to wait for cloud-sql-proxy to start.

Examples:

  - Connect to an instance in the default gcloud project+region with IAM auth:

      ${prog_name} my-instance

  - Connect and execute MySQL command (e.g. from Terraform):

      ${prog_name} my-instance -- \
        mysql --user="someuser" --execute='SELECT "Hello world";'

  - Connect using a full connection name with IAM auth:

      ${prog_name} my-project:us-west2:my-instance

  - Connect with password-based auth and prompt for password on stdin:

      ${prog_name} my-instance --no-iam

  - Connect with password-based auth and send password via environment (not
    recommended, but sometimes you have no choice - e.g. Terraform local-exec):

      MYSQL_PWD="somepass" ${prog_name} my-instance --no-iam

  - Connect with password-based auth and send password via command-line
    argument (definitely not recommended):

      ${prog_name} my-instance --no-iam -- \
        mysql --user="someuser" --password="somepass"

  - Connect with service account impersonation:

      ${prog_name} my-instance \
        --impersonate-service-account=svc@proj.iam.gserviceaccount.com

TODO/FIXME/Warning:
  Automatic username inference currently only happens if no explicit subcommand
  is provided.  This makes \`${prog_name}\` behave like \`gcloud sql connect\`
  in the default case by providing a SQL command prompt based entirely on the
  user's gcloud configuration (or \`--impersonate-service-account=...\` if
  specified), but no such convenience happens if you pass any explicit
  subcommand - even if it's simply \`-- mysql\`.  Making this more consistently
  convenient is a possible future improvement.
EOF
}

csql_ciam::_log_debug() {
  if [[ -n "${CSQL_CIAM_DEBUG}" ]]; then
    printf "$@" >&2
  fi
}

csql_ciam::_parse_args() {
  #
  # Parses command-line args and fills in `CSQL_CIAM_*` variables if not already
  # passed in via environment.
  #

  local arg_pos=0
  if (($# < 1)); then
    csql_ciam::_show_usage
    return 1
  fi
  while (($#)); do
    local arg="$1"
    local value="${arg#*=}"
    shift
    case "${arg}" in
      -h | --help)
        csql_ciam::_show_usage
        return 1
        ;;
      --impersonate-service-account=*)
        CSQL_CIAM_IMPERSONATE_SERVICE_ACCOUNT="${value}"
        _PROXY_ARGS+=("${arg}")
        ;;
      --no-iam)
        CSQL_CIAM_IAM_AUTH=0
        ;;
      --project=*)
        CSQL_CIAM_GCP_PROJECT="${value}"
        ;;
      --proxy-command=*)
        CSQL_CIAM_PROXY_COMMAND="${value}"
        ;;
      --proxy-tmpdir=*)
        CSQL_CIAM_PROXY_TMPDIR="${value}"
        ;;
      --proxy-timeout=*)
        CSQL_CIAM_PROXY_TIMEOUT="${value}"
        ;;
      --region=*)
        CSQL_CIAM_GCP_REGION="${value}"
        ;;
      --)
        _CSQL_CIAM_SUBCOMMAND_ARGS=("$@")
        break
        ;;
      *)
        if ((arg_pos == 0)); then
          if [[ "${arg}" =~ : ]]; then
            CSQL_CIAM_CONNECTION_NAME="${arg}"
          else
            CSQL_CIAM_INSTANCE_NAME="${arg}"
          fi
        else
          printf "Unexpected positional argument: %s" "${arg}" >&2
          return 1
        fi
        let ++arg_pos
        ;;
    esac
  done

  if [[ -n "${CSQL_CIAM_CONNECTION_NAME}" ]]; then
    : # TODO: unpack connection name and set instance/project/region vars

  elif [[ -n "${CSQL_CIAM_INSTANCE_NAME}" ]]; then
    if [[ -z "${CSQL_CIAM_GCP_PROJECT}" ]]; then
      CSQL_CIAM_GCP_PROJECT="$(gcloud config get-value project 2> /dev/null)" || return
      if [[ -z "${CSQL_CIAM_GCP_PROJECT}" ]]; then
        printf "GCP project must be provided if gcloud default project is unset.\n" >&2
        return 1
      fi
    fi

    if [[ -z "${CSQL_CIAM_GCP_REGION}" ]]; then
      CSQL_CIAM_GCP_REGION="$(gcloud config get compute/region 2> /dev/null)" || return
      if [[ -z "${CSQL_CIAM_GCP_REGION}" ]]; then
        printf "GCP region must be provided if gcloud default region is unset.\n" >&2
        return 1
      fi
    fi

    CSQL_CIAM_CONNECTION_NAME="${CSQL_CIAM_GCP_PROJECT}:${CSQL_CIAM_GCP_REGION}:${CSQL_CIAM_INSTANCE_NAME}"

  else
    printf "Instance or connection name must be provided." >&2
    return 1
  fi

  # echo "${CSQL_CIAM_SUBCOMMAND}"
  # echo "${CSQL_CIAM_COMMAND_ARGS[@]}"
}

csql_ciam::_shutdown() {
  local proxy_tmp_subdir="$1"
  local proxy_pid="${2:-}"

  if [[ -n "${proxy_pid}" ]]; then
    csql_ciam::_log_debug \
      "Shutting down cloud-sql-proxy process %d\n" \
      "${proxy_pid}"
    kill "${proxy_pid}" 2> /dev/null || true
    wait "${proxy_pid}" || true
  fi

  csql_ciam::_log_debug \
    "Removing proxy socket tmp directory: %s\n" \
    "${proxy_tmp_subdir}"
  rm -rf "${proxy_tmp_subdir}"
}

csql_ciam::_bind_args() {
  #
  # `csql_ciam::_bind_args <func> [args...]`: Generate a command string that
  # binds argument(s) to a function with proper escaping (handling of spaces,
  # etc.).
  #
  # This function closely resembles Python's `functions.partial`; but because
  # it's not possible to return a function directly, the output is a command
  # literal that can be evaluated via variable expansion without quotes (not
  # requiring `eval)`.
  #
  # Example:
  #
  #     foo="$(csql_ciam::_bind_args ls -l)"
  #     ${foo}        # equivalent to `ls -l`
  #     ${foo} -a ..  # equivalent to `ls -l -a ..`
  #     "${foo}" -a   # incorrect! equivalent to `"ls -l" -a`
  #
  # > **Note**: This is one of the very few cases in bash where variable
  # > expansion must *not* be quoted.
  #
  local func="$1"
  printf "%q" "${func}"
  shift
  for arg in "$@"; do
    printf " %q" "${arg}"
  done
}

csql_ciam::_infer_gcloud_email() {
  #
  # `csql_ciam_infer_gcloud_email`: Infer the email of gcloud's application-
  # default credentials.
  #
  # > **Note**: Although there's `gcloud config get account`, it comes from
  # > `gcloud auth login` which is separate from `gcloud application-default
  # > login`.  Although users often use the same account for both, this errs on
  # > the side of consistently uses application-default credentials since that's
  # > what cloud-sql-proxy defaults to as well.
  #
  # gcloud doesn't directly expose the application-default credentials email,
  # but it can be retrieved via the `userinfo` API.
  # See [stackoverflow#73368141](https://stackoverflow.com/questions/73368141).
  #
  csql_ciam::_log_debug "Fetching gcloud application-default user info...\n"

  local token user_info_json
  token="$(gcloud auth application-default print-access-token)" || return
  user_info_json="$(
    curl \
      https://www.googleapis.com/oauth2/v1/userinfo \
      --header "Authorization: Bearer ${token}" \
      --show-error \
      --silent
  )" || return

  # Scrape JSON crudely to extract email (ymmv):
  local email
  if [[ "${user_info_json}" =~ \"email\":\ \"([^\"]+)\" ]]; then
    email="${BASH_REMATCH[1]}"
  else
    echo "Unable to determine gcloud application-default email." >&2
    return 1
  fi

  echo "${email}"
}

csql_ciam::_infer_user() {
  local impersonate_service_account="$1"
  local email
  if [[ -n "${impersonate_service_account}" ]]; then
    email="${impersonate_service_account##,}" # final comma-separated value
  else
    email="$(csql_ciam::_infer_gcloud_email)" || return
  fi
  echo "${email%%@*}" # `first.last@example.com` -> `first.last`
}

csql_ciam::_run_subcommand() {
  #
  # Runs the subcommand specified by the caller (e.g. `mysql`).
  #
  # No explicit assumption is made about the particular subcommand here, and
  # care is taken not to wreck the user-supplied subcommand arguments; therefore
  # anything MySQL-specific is passed through environment variables, and the
  # subcommand can choose to use them or not.
  #

  local proxy_socket_file="$1"

  if ((${#_CSQL_CIAM_SUBCOMMAND_ARGS[@]} == 0)); then
    # Default command to `mysql` and automatically infer username based on
    # gcloud credentials and/or any specified impersonation service account.
    # This makes `cloud-sql-connect-iam`'s default behavior work like `gcloud
    # sql connect`, where the user automatically connects with gcloud
    # credentials.
    #
    # However, when running `cloud-sql-connect-iam` with an explicit subcommand
    # such as `-- mysql --execute=...`, this automatic user inferrence behavior
    # is bypassed due to the complexity of correctly figuring out whether or not
    # the user supplied a `--user=...` in the subcommand, or if the user is
    # running mysql from a different path (e.g.
    # `/opt/homebrew/opt/mysql@5.7/bin/mysql`), etc.  TODO: possibly provide an
    # option to do this auto-user detection in such cases.

    local user="$(csql_ciam::_infer_user "${CSQL_CIAM_IMPERSONATE_SERVICE_ACCOUNT}")" \
      || return
    _CSQL_CIAM_SUBCOMMAND_ARGS=("mysql" "--user=${user}")
    if ((CSQL_CIAM_IAM_AUTH == 0)); then
      _CSQL_CIAM_SUBCOMMAND_ARGS+=("--password")
    fi
  fi

  # Export `CSQL_*` variables:
  export CSQL_CIAM_CONNECTION_NAME
  export CSQL_CIAM_GCP_PROJECT
  export CSQL_CIAM_GCP_REGION
  export CSQL_CIAM_IAM_AUTH
  export CSQL_CIAM_IMPERSONATE_SERVICE_ACCOUNT
  export CSQL_CIAM_INSTANCE_NAME
  export CSQL_CIAM_PROXY_SOCKET_FILE="${proxy_socket_file}"

  if ((CSQL_CIAM_DEBUG == 1)); then
    set | grep '^CSQL_' 2>&1
  fi

  # Export mysql environment variables:
  if ((CSQL_CIAM_IAM_AUTH == 1)); then
    export LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN=1
  fi
  export MYSQL_UNIX_PORT="${proxy_socket_file}"

  # Run subcommand:
  "${_CSQL_CIAM_SUBCOMMAND_ARGS[@]}" || return
}

csql_ciam::_main() {
  csql_ciam::_parse_args "$@" || return

  # Create tmpdir for proxy socket file:
  umask 077
  local proxy_socket proxy_tmp_subdir
  proxy_tmp_subdir="${CSQL_CIAM_PROXY_TMPDIR}/$(mktemp -u cloudsql-XXXXXX)"
  proxy_socket_file="${proxy_tmp_subdir}/${CSQL_CIAM_CONNECTION_NAME}"
  csql_ciam::_log_debug "Proxy socket directory: %s\n" "${proxy_tmp_subdir}"
  mkdir -p "${proxy_tmp_subdir}"
  trap "$(csql_ciam::_bind_args csql_ciam::_shutdown "${proxy_tmp_subdir}")" EXIT

  # Build proxy args:
  local proxy_args=(
    "--unix-socket=${proxy_tmp_subdir}"
    "${CSQL_CIAM_CONNECTION_NAME}"
    "${_PROXY_ARGS[@]}"
  )
  if ((CSQL_CIAM_IAM_AUTH == 1)); then
    proxy_args+=("--auto-iam-authn")
  fi

  # echo "${proxy_args[@]}" >&2

  # Start proxy:
  csql_ciam::_log_debug \
    "Starting proxy: %s %s\n" "${CSQL_CIAM_PROXY_COMMAND}" "${proxy_args[*]}"

  "${CSQL_CIAM_PROXY_COMMAND}" "${proxy_args[@]}" >&2 &
  local proxy_pid
  proxy_pid="$!"
  trap \
    "$(
      csql_ciam::_bind_args \
        csql_ciam::_shutdown \
        "${proxy_tmp_subdir}" \
        "${proxy_pid}"
    )" \
    EXIT

  # Wait for proxy to start:
  SECONDS=0
  until [[ -S "${proxy_socket_file}" ]]; do
    if ((SECONDS >= ${CSQL_CIAM_PROXY_TIMEOUT})); then
      printf "Timed out waiting for cloud-sql-proxy to start; exiting...\n" >&2
      return 1
    fi
    sleep 0.1
  done

  # Run subcommand at last:
  csql_ciam::_run_subcommand "${proxy_socket_file}"
}

csql_ciam::_main "$@"
